Functions Module
****************

All functions support the methods documented below, inherited from
:py:class:`sympy.core.function.Function`.

.. module:: sympy.core.function

.. autoclass:: Function
   :noindex:
   :members:


Elementary
==========

This module implements elementary functions, as well as functions like Abs,
Max, etc.


Abs
---

Returns the absolute value of the argument.

Examples::

    >>> from sympy.functions import Abs
    >>> Abs(-1)
    1

.. module:: sympy.functions.elementary.complexes

.. autoclass:: Abs
   :members:

acos
----
.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: acos
   :members:

acosh
-----
.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: acosh
   :members:

acot
----
.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: acot
   :members:

acoth
-----
.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: acoth
   :members:

arg
---

Returns the argument (in radians) of a complex number. For a real
number, the argument is always 0.

Examples::

    >>> from sympy.functions import arg
    >>> from sympy import I, sqrt
    >>> arg(2.0)
    0
    >>> arg(I)
    pi/2
    >>> arg(sqrt(2) + I*sqrt(2))
    pi/4

.. module:: sympy.functions.elementary.complexes

.. autoclass:: arg
   :members:

asin
----

.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: asin
   :members:

asinh
-----

.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: asinh
   :members:

atan
----

.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: atan
   :members:

atan2
-----

This function is like `atan`, but considers the sign of both arguments in
order to correctly determine the quadrant of its result.

.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: atan2
   :members:

atanh
-----

.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: atanh
   :members:

ceiling
-------

.. module:: sympy.functions.elementary.integers

.. autoclass:: ceiling
   :members:

conjugate
---------

Returns the `complex conjugate <http://en.wikipedia.org/wiki/Complex_conjugation>`_
of an argument. In mathematics, the complex conjugate of a complex number is given
by changing the sign of the imaginary part. Thus, the conjugate of the complex number

    :math:`a + ib`

(where a and b are real numbers) is

    :math:`a - ib`

Examples::

    >>> from sympy.functions import conjugate
    >>> from sympy import I
    >>> conjugate(2)
    2
    >>> conjugate(I)
    -I

.. module:: sympy.functions.elementary.complexes

.. autoclass:: conjugate
   :members:

cos
---

.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: cos
   :members:

cosh
----

.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: cosh
   :members:

cot
---

.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: cot
   :members:

coth
----

.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: coth
   :members:

exp
---

.. module:: sympy.functions.elementary.exponential

.. autoclass:: exp
   :members:

exp_polar
---------

.. module:: sympy.functions.elementary.exponential

.. autoclass:: exp_polar
   :members:

ExprCondPair
------------

.. module:: sympy.functions.elementary.piecewise

.. autoclass:: ExprCondPair
   :members:

floor
-----

.. module:: sympy.functions.elementary.integers

.. autoclass:: floor
   :members:

HyperbolicFunction
------------------

.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: HyperbolicFunction
   :members:

IdentityFunction
----------------

.. module:: sympy.functions.elementary.miscellaneous

.. autoclass:: IdentityFunction
   :members:

im
--

Returns the imaginary part of an expression.

Examples::


    >>> from sympy.functions import im
    >>> from sympy import I
    >>> im(2+3*I)
    3

.. module:: sympy.functions.elementary.complexes

.. autoclass:: im
   :members:

LambertW
--------

.. module:: sympy.functions.elementary.exponential

.. autoclass:: LambertW
   :members:

log
---

.. module:: sympy.functions.elementary.exponential

.. autoclass:: log
   :members:

Min
---

Returns the minimum of two (comparable) expressions.

Examples::

    >>> from sympy.functions import Min
    >>> Min(1,2)
    1
    >>> from sympy.abc import x
    >>> Min(1, x)
    Min(1, x)

It is named Min and not min to avoid conflicts with the built-in function min.

.. module:: sympy.functions.elementary.miscellaneous

.. autoclass:: Min
   :members:


Max
---

Returns the maximum of two (comparable) expressions

It is named Max and not max to avoid conflicts with the built-in function max.

.. module:: sympy.functions.elementary.miscellaneous

.. autoclass:: Max
   :members:

periodic_argument
-----------------

.. module:: sympy.functions.elementary.complexes

.. autoclass:: periodic_argument
   :members:

Piecewise
---------

.. module:: sympy.functions.elementary.piecewise

.. autoclass:: Piecewise
   :members:

.. autofunction:: piecewise_fold

polar_lift
----------

.. module:: sympy.functions.elementary.complexes

.. autoclass:: polar_lift
   :members:

principal_branch
----------------

.. module:: sympy.functions.elementary.complexes

.. autoclass:: principal_branch
   :members:

re
--

Return the real part of an expression.

Examples::

    >>> from sympy.functions import re
    >>> from sympy import I
    >>> re(2+3*I)
    2

.. module:: sympy.functions.elementary.complexes

.. autoclass:: re
   :members:

real_root
---------

.. module:: sympy.functions.elementary.miscellaneous

.. autofunction:: real_root

root
----

.. module:: sympy.functions.elementary.miscellaneous

.. autofunction:: root

RoundFunction
-------------

.. module:: sympy.functions.elementary.integers

.. autoclass:: RoundFunction

sin
---

.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: sin
   :members:

sinh
----

.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: sinh
   :members:

sqrt
----

Returns the square root of an expression. It is equivalent to raise to Rational(1,2)

    >>> from sympy.functions import sqrt
    >>> from sympy import Rational
    >>> sqrt(2) == 2**Rational(1,2)
    True

.. module:: sympy.functions.elementary.miscellaneous

.. autoclass:: sqrt
   :members:


sign
----

.. module:: sympy.functions.elementary.complexes

.. autoclass:: sign
   :members:

tan
---

.. module:: sympy.functions.elementary.trigonometric

.. autoclass:: tan
   :members:

tanh
----

.. module:: sympy.functions.elementary.hyperbolic

.. autoclass:: tanh
   :members:


Combinatorial
=============

This module implements various combinatorial functions.

bell
----

.. module:: sympy.functions.combinatorial.numbers

.. autoclass:: bell
   :members:

bernoulli
---------

.. autoclass:: bernoulli
   :members:

binomial
--------

.. module:: sympy.functions.combinatorial.factorials

.. autoclass:: binomial
   :members:

catalan
-------

.. module:: sympy.functions.combinatorial.numbers

.. autoclass:: catalan
   :members:

euler
-----

.. autoclass:: euler
   :members:


factorial
---------

.. module:: sympy.functions.combinatorial.factorials

.. autoclass:: factorial
   :members:

factorial2 / double factorial
-----------------------------

.. autoclass:: factorial2
   :members:


FallingFactorial
----------------

.. autoclass:: FallingFactorial
   :members:

fibonacci
---------

.. module:: sympy.functions.combinatorial.numbers

.. autoclass:: fibonacci
   :members:

harmonic
--------

.. autoclass:: harmonic
   :members:


lucas
-----

.. autoclass:: lucas
   :members:


MultiFactorial
--------------

.. module:: sympy.functions.combinatorial.factorials

.. autoclass:: MultiFactorial
   :members:


RisingFactorial
---------------

.. autoclass:: RisingFactorial
   :members:


Special
=======

DiracDelta
----------

.. module:: sympy.functions.special.delta_functions

.. autoclass:: DiracDelta
   :members:

Heaviside
---------

.. autoclass:: Heaviside
   :members:

beta
----

.. module:: sympy.functions.special.gamma_functions

.. autofunction:: beta

erf
---

.. module:: sympy.functions.special.error_functions

.. autoclass:: erf
   :members:

gamma
-----

.. module:: sympy.functions.special.gamma_functions

.. autoclass:: gamma
   :members:

loggamma
--------

.. autoclass:: loggamma
   :members:

polygamma
---------

.. autoclass:: polygamma
   :members:

digamma
-------
.. autofunction:: digamma

trigamma
--------
.. autofunction:: trigamma

uppergamma
----------
.. autoclass:: uppergamma
   :members:

lowergamma
----------
.. autoclass:: lowergamma
   :members:

Bessel Type Functions
---------------------

.. module:: sympy.functions.special.bessel

.. autoclass:: BesselBase
   :members:

.. autoclass:: besselj
.. autoclass:: bessely
.. autoclass:: besseli
.. autoclass:: besselk
.. autoclass:: hankel1
.. autoclass:: hankel2
.. autoclass:: jn
.. autoclass:: yn

.. autofunction:: jn_zeros

B-Splines
---------

.. module:: sympy.functions.special.bsplines

.. autofunction:: bspline_basis
.. autofunction:: bspline_basis_set

Hypergeometric Functions
------------------------

.. module:: sympy.functions.special.hyper

.. autoclass:: hyper
   :members:

.. autoclass:: meijerg
   :members:

Orthogonal Polynomials
----------------------

.. module:: sympy.functions.special.polynomials

.. automodule:: sympy.functions.special.polynomials

Chebyshev Polynomials
+++++++++++++++++++++

.. autoclass:: chebyshevt
   :members:

.. autoclass:: chebyshevu
   :members:

.. autoclass:: chebyshevt_root
   :members:

.. autoclass:: chebyshevu_root
   :members:

Legendre Polynomials
++++++++++++++++++++

.. autoclass:: legendre
   :members:

.. autoclass:: assoc_legendre
   :members:

Hermite Polynomials
+++++++++++++++++++

.. autoclass:: hermite
   :members:

Laguerre Polynomials
++++++++++++++++++++

.. autofunction:: laguerre_l

Spherical Harmonics
-------------------

.. module:: sympy.functions.special.spherical_harmonics

.. autofunction:: Plmcos

.. autofunction:: Ylm

.. autofunction:: Ylm_c

.. autofunction:: Zlm

Tensor Functions
----------------

.. module:: sympy.functions.special.tensor_functions

.. autofunction:: Eijk

.. autofunction:: eval_levicivita

.. autoclass:: LeviCivita
   :members:

.. autoclass:: KroneckerDelta
   :members:

Zeta Functions
--------------

.. module:: sympy.functions.special.zeta_functions

.. autoclass:: zeta
   :members:

.. autoclass:: dirichlet_eta
   :members:
