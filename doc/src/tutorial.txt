.. _tutorial:

=========
Туторијал
=========

.. role:: input(strong)

Увод
====

SymPy je Python библиотека за симболичку математику. Циља да постане потпуно садржани 
алгебарски систем (енглески CAS: "Computer Algebra System"), чувајући код једноставнијим
колико је могуће да би била разумљива и лакше проширива. SymPy је комплетно написан
у програмском језику Python и не захтева никакве екстерне библиотеке.

Овај туторијал даје вам преглед и увод у SymPy.
Прочитајте га да бисте имали идеју шта SymPy можете урадити (и како) а ако хоћете да сазнате више, прочитајте
:ref:`SymPy кориснички водич <guide>`,
:ref:`SymPy референтни модул <module-docs>`.
или `изворни код
<https://github.com/sympy/sympy/>`_ директно.

Први кораци
===========

Најлакши начин да се преузме је да одете на 
http://code.google.com/p/sympy/ и
преузмeте последњу архиву из истакнутих преузимања:

.. image:: figures/featured-downloads.png

Отпакујте:

.. parsed-literal::

    $ :input:`tar xzf sympy-0.5.12.tar.gz`

и покушајте из Python интерпретера:

.. parsed-literal::

    $ :input:`cd sympy-0.5.12`
    $ :input:`python`
    Python 2.4.4 (#2, Jan  3 2008, 13:36:28)
    [GCC 4.2.3 20071123 (prerelease) (Debian 4.2.2-4)] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> from sympy import Symbol, cos
    >>> x = Symbol("x")
    >>> (1/cos(x)).series(x, 0, 10)
    1 + x**2/2 + 5*x**4/24 + 61*x**6/720 + 277*x**8/8064 + O(x**10)

Можете да користите SymPy како је указано горе и то је препоручен начин ако се користи
у вашем програму. Такође га можете инсталирати користећи ``./setup.py install`` као и 
сваки други Python модул, или само инсталирати пакет ваше Линукс дистрибуције:

.. topic:: Инсталирање SymPy у Дебијану

  .. parsed-literal::

    $ :input:`sudo apt-get install python-sympy`
    Reading package lists... Done
    Building dependency tree
    Reading state information... Done
    The following NEW packages will be installed:
      python-sympy
    0 upgraded, 1 newly installed, 0 to remove and 18 not upgraded.
    Need to get 991kB of archives.
    After this operation, 5976kB of additional disk space will be used.
    Get:1 http://ftp.cz.debian.org unstable/main python-sympy 0.5.12-1 [991kB]
    Fetched 991kB in 2s (361kB/s)
    Selecting previously deselected package python-sympy.
    (Reading database ... 232619 files and directories currently installed.)
    Unpacking python-sympy (from .../python-sympy_0.5.12-1_all.deb) ...
    Setting up python-sympy (0.5.12-1) ...


За остале начине инсталирања SymPy констултујте Downloads_ таб на
SymPy страници.

.. _Downloads: http://code.google.com/p/sympy/wiki/DownloadInstallation?tm=2


isympy конзола
--------------

За експериментисање са новим могућностима или када схватате како да радите 
неке радње, можете користити специјални омот око IPython , звани ``isympy`` (лоциран у 
``bin/isympy`` ако покрећете из изворног фолдера) који је само стандардна
Python љуска коју су већ увежени SymPy модули, симболи x, y, z и друго:

.. parsed-literal::

    $ :input:`cd sympy`
    $ :input:`./bin/isympy`
    IPython console for SymPy 0.7.1-git (Python 2.7.1) (ground types: gmpy)

    These commands were executed:
    >>> from __future__ import division
    >>> from sympy import *
    >>> x, y, z, t = symbols('x y z t')
    >>> k, m, n = symbols('k m n', integer=True)
    >>> f, g, h = symbols('f g h', cls=Function)

    Documentation can be found at http://www.sympy.org

    In [1]: :input:`(1/cos(x)).series(x, 0, 10)`
    Out[1]:
         2      4       6        8
        x    5*x    61*x    277*x     / 10\
    1 + ── + ──── + ───── + ────── + O\x  /
        2     24     720     8064

.. note::

    Команде су подебљане. То што смо урадили са 3 линије
    у регуларном Python интерпретеру може бити урађено у једној линији у isympy.


SymPy као дигитрон
------------------

SymPy има три уграђена типа бројева: променљиви, рационални и цели.

Класа "Rational" представља рацоинални број као пар од два цела, именилац и садржилац, тако да рационални
број Rational(1,2) представаља 1/2, Rational(5,2) представља 5/2 и тако даље.

::

    >>> from sympy import *
    >>> a = Rational(1,2)

    >>> a
    1/2

    >>> a*2
    1

    >>> Rational(2)**50/Rational(10)**50
    1/88817841970012523233890533447265625


Наставите са пажњом док радите са целим и променљивим бројевима, 
посебно у дељењу, јер можете направити
Python број, а не SymPy број. Однос два цела броја у Python може направити променљливи -- 
истинито дељење(true divison) стандардно за Python 3
у подразумевано понашање ``isympy`` који увози дељење из __future__::

    >>> 1/2 #doctest: +SKIP
    0.5

Али у ранијим Python верзијама где дељење није увежено, скраћени цели број ће бити резултат::

    >>> 1/2 #doctest: +SKIP
    0

У оба случаја, ипак, не радите са SymPy бројевима јер је
Python креирао своје посебне бројеве. Већину времена ћете вероватно радити са рационалним бројевима, 
тако да будите сигурни да користите рационалне бројеве да бисте добили SymPy резултат.
Могло би бити згодно изједначити ``R`` и Rational::

    >>> R = Rational
    >>> R(1, 2)
    1/2
    >>> R(1)/2 # R(1) is a sympy Integer and Integer/int gives a Rational
    1/2

Такође имамо неке специјалне константе као e и pi, који се третирају као симболи
(1+pi неће прерачунати у нумерчку форму, већ ће остати као 1+pi), могу имати произвољну прецизност:

    >>> pi**2
    pi**2

    >>> pi.evalf()
    3.14159265358979

    >>> (pi+exp(1)).evalf()
    5.85987448204884

као што видите, evalf рачуна израз у реалан број 

Симбол ``oo`` представља бесконачно::

    >>> oo > 99999
    True
    >>> oo + 1
    oo

Симболи
-------

За разлику од осталих компјутерских алгебарских система, у SymPy ви морате да декларишете
симболичке променљиве експлицитно:

    >>> from sympy import *
    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> z = Symbol('z')

На левој страни је нормална Python променљива која је додељена
SymPy Symbol класи. Инстанце класе Symbol се "добро слажу" и чине основу израза::

    >>> x+y+x-y
    2*x

    >>> (x+y)**2
    (x + y)**2

    >>> ((x+y)**2).expand()
    x**2 + 2*x*y + y**2

Они могу бити замењени са другим бројевима, симболима или изразима користећи команду ``subs(old, new)``::

    >>> ((x+y)**2).subs(x, 1)
    (y + 1)**2

    >>> ((x+y)**2).subs(x, y)
    4*y**2

    >>> ((x+y)**2).subs(x, 1 - y)
    1

За остатак овог туторијала, претпостављамо да смо извршили::

    >>> init_printing(use_unicode=False, wrap_line=False, no_global=True)

Ово ће лепше штампати резултате. Погледајте :ref:`printing-tutorial`
секцију. Ако имате
неки уникод фонт инсталиран, можете користити
use_unicode=True за много лепше резултате.

Алгебра
=======

За делимични разломак, користите ``apart(expr, x)``::

    >>> 1/( (x+2)*(x+1) )
           1
    ---------------
    (x + 1)*(x + 2)

    >>> apart(1/( (x+2)*(x+1) ), x)
        1       1
    - ----- + -----
      x + 2   x + 1

    >>> (x+1)/(x-1)
    x + 1
    -----
    x - 1

    >>> apart((x+1)/(x-1), x)
          2
    1 + -----
        x - 1

Да бисте комбиновали ствари заједно, користите ``together(expr, x)``::

    >>> together(1/x + 1/y + 1/z)
    x*y + x*z + y*z
    ---------------
         x*y*z

    >>> together(apart((x+1)/(x-1), x), x)
    x + 1
    -----
    x - 1

    >>> together(apart(1/( (x+2)*(x+1) ), x), x)
           1
    ---------------
    (x + 1)*(x + 2)


.. index:: calculus

Математичка анализа
===================

.. index:: limits

Лимити
------

Лимити се лако употребљавају, користе синтаксу ``limit(function,variable, point)``,
тако да би израчунали лимит од f(x) када x тежи нули, ви би издали
``limit(f, x, 0)``::

   >>> from sympy import *
   >>> x=Symbol("x")
   >>> limit(sin(x)/x, x, 0)
   1

Можете такође израчунати у бесконачности::

   >>> limit(x, x, oo)
   oo

   >>> limit(1/x, x, oo)
   0

   >>> limit(x**x, x, 0)
   1

За неке не-тривијалне примере са лимитима, можете прочитати тест датотеку
`test_demidovich.py
<https://github.com/sympy/sympy/blob/master/sympy/series/tests/test_demidovich.py>`_

.. index:: differentiation, diff

Изводи
------

Можете израчунати извод сваког израза користећи ``diff(func, var)``. Примери::

    >>> from sympy import *
    >>> x = Symbol('x')
    >>> diff(sin(x), x)
    cos(x)
    >>> diff(sin(2*x), x)
    2*cos(2*x)

    >>> diff(tan(x), x)
       2
    tan (x) + 1

можете проверити да ли је то тачно са::

    >>> limit((tan(x+y)-tan(x))/y, y, 0)
       2
    tan (x) + 1

Виши изводи се могу израчунати користећи метод ``diff(func, var, n)``::

    >>> diff(sin(2*x), x, 1)
    2*cos(2*x)

    >>> diff(sin(2*x), x, 2)
    -4*sin(2*x)

    >>> diff(sin(2*x), x, 3)
    -8*cos(2*x)


.. index::
    single: series expansion
    single: expansion; series

Развој редова
-------------

Користите ``.series(var, point, order)``::

    >>> from sympy import *
    >>> x = Symbol('x')
    >>> cos(x).series(x, 0, 10)
         2    4     6      8
        x    x     x      x      / 10\
    1 - -- + -- - --- + ----- + O\x  /
        2    24   720   40320
    >>> (1/cos(x)).series(x, 0, 10)
         2      4       6        8
        x    5*x    61*x    277*x     / 10\
    1 + -- + ---- + ----- + ------ + O\x  /
        2     24     720     8064

Још један једноставан пример::

    from sympy import Integral, Symbol, pprint

    x = Symbol("x")
    y = Symbol("y")

    e = 1/(x + y)
    s = e.series(x, 0, 5)

    print(s)
    pprint(s)

То би требало да одштампа следеће после покретања::

    1/y + x**2*y**(-3) + x**4*y**(-5) - x*y**(-2) - x**3*y**(-4) + O(x**5)
         2    4         3
    1   x    x    x    x     / 5\
    ─ + ── + ── - ── - ── + O\x /
    y    3    5    2    4
        y    y    y    y

.. index:: integration

Интеграција
-----------

SymPy има подршку за одређену и неодређену интеграцију трансцендентних, елементарних и специјалних функција
преко методе ``integrate()`` које користи
моћни проширени Risch-Norman алгоритам и неке хеуристике и обрасце
поклапања::

    >>> from sympy import *
    >>> x, y = symbols('x,y')

Можете интегрирати елементарне функције::

    >>> integrate(6*x**5, x)
     6
    x
    >>> integrate(sin(x), x)
    -cos(x)
    >>> integrate(log(x), x)
    x*log(x) - x
    >>> integrate(2*x + sinh(x), x)
     2
    x  + cosh(x)

Можете користити и разне специјалне функције::

    >>> integrate(exp(-x**2)*erf(x), x)
      ____    2
    \/ pi *erf (x)
    --------------
          4

Могуће је израчунати одређени интеграл::

    >>> integrate(x**3, (x, -1, 1))
    0
    >>> integrate(sin(x), (x, 0, pi/2))
    1
    >>> integrate(cos(x), (x, -pi/2, pi/2))
    2

Такође су подржани неправилни интеграли::

    >>> integrate(exp(-x), (x, 0, oo))
    1
    >>> integrate(log(x), (x, 0, 1))
    -1

.. index::
    single: complex numbers
    single: expansion; complex

Комплексни бројеви
------------------

::

    >>> from sympy import Symbol, exp, I
    >>> x = Symbol("x")
    >>> exp(I*x).expand()
     I*x
    e
    >>> exp(I*x).expand(complex=True)
       -im(x)               -im(x)
    I*e      *sin(re(x)) + e      *cos(re(x))
    >>> x = Symbol("x", real=True)
    >>> exp(I*x).expand(complex=True)
    I*sin(x) + cos(x)

Функције
--------

**тригонометријске**::

    >>> sin(x+y).expand(trig=True)
    sin(x)*cos(y) + sin(y)*cos(x)

    >>> cos(x+y).expand(trig=True)
    -sin(x)*sin(y) + cos(x)*cos(y)

    >>> sin(I*x)
    I*sinh(x)

    >>> sinh(I*x)
    I*sin(x)

    >>> asinh(I)
    I*pi
    ----
     2

    >>> asinh(I*x)
    I*asin(x)

    >>> sin(x).series(x, 0, 10)
         3     5     7       9
        x     x     x       x       / 10\
    x - -- + --- - ---- + ------ + O\x  /
        6    120   5040   362880

    >>> sinh(x).series(x, 0, 10)
         3     5     7       9
        x     x     x       x       / 10\
    x + -- + --- + ---- + ------ + O\x  /
        6    120   5040   362880

    >>> asin(x).series(x, 0, 10)
         3      5      7       9
        x    3*x    5*x    35*x     / 10\
    x + -- + ---- + ---- + ----- + O\x  /
        6     40    112     1152

    >>> asinh(x).series(x, 0, 10)
         3      5      7       9
        x    3*x    5*x    35*x     / 10\
    x - -- + ---- - ---- + ----- + O\x  /
        6     40    112     1152

**сферне хармонике**::

    >>> from sympy.abc import theta, phi

    >>> Ylm(1, 0, theta, phi)
      ___
    \/ 3 *cos(theta)
    ----------------
            ____
        2*\/ pi

    >>> Ylm(1, 1, theta, phi)
       ___  I*phi
    -\/ 6 *e     *sin(theta)
    ------------------------
                ____
            4*\/ pi

    >>> Ylm(2, 1, theta, phi)
       ____  I*phi
    -\/ 30 *e     *sin(theta)*cos(theta)
    ------------------------------------
                      ____
                  4*\/ pi

**Факторијали и гама функције**::

    >>> x = Symbol("x")

    >>> y = Symbol("y", integer=True)

    >>> factorial(x)
    x!

    >>> factorial(y)
    y!

    >>> gamma(x + 1).series(x, 0, 3) # i.e. factorial(x)
                         2  2             2  2
                       pi *x    EulerGamma *x     / 3\
    1 - EulerGamma*x + ------ + -------------- + O\x /
                         12           2

**Зета функције**::

    >>> zeta(4, x)
    zeta(4, x)

    >>> zeta(4, 1)
      4
    pi
    ---
     90

    >>> zeta(4, 2)
           4
         pi
    -1 + ---
          90

    >>> zeta(4, 3)
             4
      17   pi
    - -- + ---
      16    90


**Полиноми**::

    >>> chebyshevt(2, x)
       2
    2*x  - 1

    >>> chebyshevt(4, x)
       4      2
    8*x  - 8*x  + 1

    >>> legendre(2, x)
       2
    3*x    1
    ---- - -
     2     2

    >>> legendre(8, x)
          8         6         4        2
    6435*x    3003*x    3465*x    315*x     35
    ------- - ------- + ------- - ------ + ---
      128        32        64       32     128

    >>> assoc_legendre(2, 1, x)
            __________
           /    2
    -3*x*\/  - x  + 1

    >>> assoc_legendre(2, 2, x)
         2
    - 3*x  + 3

    >>> hermite(3, x)
       3
    8*x  - 12*x

.. index:: equations; differential, diff, dsolve

Диференцијални рачун
--------------------

Користећи ``isympy``::

    >>> f(x).diff(x, x) + f(x)
            2
           d
    f(x) + ---(f(x))
             2
           dx

    >>> dsolve(f(x).diff(x, x) + f(x), f(x))
    f(x) = C1*sin(x) + C2*cos(x)

.. index:: equations; algebraic, solve

Алгебарска рачун
----------------

Користећи ``isympy``::

    >>> solve(x**4 - 1, x)
    [-1, 1, -I, I]

    >>> solve([x + 5*y - 2, -3*x + 6*y - 15], [x, y])
    {x: -3, y: 1}

.. index:: linear algebra

Линеарна алгебра
================

.. index:: Matrix

Матрице
-------

Матрице се праве као инстанце класе Matrix::

    >>> from sympy import Matrix
    >>> Matrix([[1,0], [0,1]])
    [1  0]
    [    ]
    [0  1]

можете такође ставити симболе::

    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> A = Matrix([[1,x], [y,1]])
    >>> A
    [1  x]
    [    ]
    [y  1]

    >>> A**2
    [x*y + 1    2*x  ]
    [                ]
    [  2*y    x*y + 1]

За више информација и примера са матрицама, погледајте LinearAlgebraTutorial.

.. index:: pattern matching, match, Wild, WildFunction

Поклапање образаца
==================

Користите метод ``.match()`` са класом ``Wild``, да би извршили образац
одговарајуће на изразе. Овај метод ће вратити речник (dictionary) са потребним изменама, као::

    >>> from sympy import *
    >>> x = Symbol('x')
    >>> p = Wild('p')
    >>> (5*x**2).match(p*x**2)
    {p: 5}

    >>> q = Wild('q')
    >>> (x**2).match(p*x**q)
    {p: 1, q: 2}

Ако је претрага неуспешна, метода враћа  ``None``::

    >>> print (x+1).match(p**x)
    None

Можете користити параметар exclude класе ``Wild`` да би били сигурни да 
се одређене ствари неће приказати у реѕултату::

    >>> x = Symbol('x')
    >>> p = Wild('p', exclude=[1,x])
    >>> print (x+1).match(x+p) # 1 is excluded
    None
    >>> print (x+1).match(p+1) # x is excluded
    None
    >>> print (x+1).match(x+2+p) # -1 is not excluded
    {p_: -1}

.. _printing-tutorial:

Штампање
========

Постоји више начина како изрази могу бити одштампани.

**Стандардно**

Ово је резултат методе ``str(expression)`` и изгледа као:

    >>> from sympy import Integral
    >>> from sympy.abc import x
    >>> print x**2
    x**2
    >>> print 1/x
    1/x
    >>> print Integral(x**2, x)
    Integral(x**2, x)
    >>>


**Лепше штампање**

Ово је лепше ascii штампање направљено са  функцијом ``pprint``:

    >>> from sympy import Integral, pprint
    >>> from sympy.abc import x
    >>> pprint(x**2)
     2
    x
    >>> pprint(1/x)
    1
    -
    x
    >>> pprint(Integral(x**2, x))
      /
     |
     |  2
     | x  dx
     |
    /

Ако имате неки уникод фонт инсталиран, лепше штампање би се требало подразумевано користити.
Можете прескочити та подешавања користећи опцију ``use_unicode`` :

    >>> pprint(Integral(x**2, x), use_unicode=True)
    ⌠
    ⎮  2
    ⎮ x  dx
    ⌡


Погледајте и вики `Pretty Printing
<https://github.com/sympy/sympy/wiki/Pretty-Printing>`_ за више примера 
лепог уникодног штампања.

Савет: Да бисте направили лепо штампање подразумеваним у Python интерпретеру користите::

    $ python
    Python 2.5.2 (r252:60911, Jun 25 2008, 17:58:32)
    [GCC 4.3.1] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> from sympy import *
    >>> init_printing(use_unicode=False, wrap_line=False, no_global=True)
    >>> var("x")
    x
    >>> x**3/3
     3
    x
    --
    3
    >>> Integral(x**2, x) #doctest: +NORMALIZE_WHITESPACE
      /
     |
     |  2
     | x  dx
     |
    /

**Python штампање**

    >>> from sympy.printing.python import python
    >>> from sympy.printing.python import python
    >>> from sympy import Integral
    >>> from sympy.abc import x
    >>> print python(x**2)
    x = Symbol('x')
    e = x**2
    >>> print python(1/x)
    x = Symbol('x')
    e = 1/x
    >>> print python(Integral(x**2, x))
    x = Symbol('x')
    e = Integral(x**2, x)


**LaTeX штампање**

    >>> from sympy import Integral, latex
    >>> from sympy.abc import x
    >>> latex(x**2)
    x^{2}
    >>> latex(x**2, mode='inline')
    $x^{2}$
    >>> latex(x**2, mode='equation')
    \begin{equation}x^{2}\end{equation}
    >>> latex(x**2, mode='equation*')
    \begin{equation*}x^{2}\end{equation*}
    >>> latex(1/x)
    \frac{1}{x}
    >>> latex(Integral(x**2, x))
    \int x^{2}\, dx

**MathML**

::

    >>> from sympy.printing.mathml import mathml
    >>> from sympy import Integral, latex
    >>> from sympy.abc import x
    >>> print mathml(x**2)
    <apply><power/><ci>x</ci><cn>2</cn></apply>
    >>> print mathml(1/x)
    <apply><power/><ci>x</ci><cn>-1</cn></apply>

**Pyglet**

    >>> from sympy import Integral, preview
    >>> from sympy.abc import x
    >>> preview(Integral(x**2, x)) #doctest:+SKIP

И отвориће се pyglet прозор са даним изразом у формату LaTeX:

.. image:: pics/pngview1.png

Белешке
-------

``isympy`` позива ``pprint`` аутоматски , зато видите лепо штампање као подразумевано.

Такође постоји модул за штампање, ``sympy.printing``.  Остали доступни
методи штампања су:

* ``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Враћа или штампа, лепо представљање од ``expr``. Ово је исто као и други ново представљања опсаног изнад.

* ``latex(expr)``, ``print_latex(expr)``: Враћа или штампа `LaTeX <http://www.latex-project.org/>`_ представљање од ``expr``

* ``mathml(expr)``, ``print_mathml(expr)``: Враћа или штампа `MathML <http://www.w3.org/Math/>`_ представљање од ``expr``.

* ``print_gtk(expr)``: Штампа ``expr`` у `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_, и GTK додатак који приказује  MathML код. `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ програм је потребан.

Додатна документација
=====================

Сада можете учити даље. Погледајте:
:ref:`SymPy User's Guide <guide>` и
:ref:`SymPy Modules Reference <module-docs>`.
Напомена: Остатак документације је доступан само на енглеском језику.

Претражите и наш јавни `wiki.sympy.org <http://wiki.sympy.org/>`_,
који садрже доста  корисних примера, туторијала, који су наши корисници
донирали и ми вас охрабрујемо да их уредите.
