#!/usr/bin/env python

"""
Program to execute doctests using the py.test like interface.

The advantage over py.test is that it only depends on sympy and should just
work in any circumstances. See "sympy.dotest?" for documentation.
"""

from __future__ import print_function

# files listed here can be in unix forward slash format with paths
# listed relative to sympy (which contains bin, etc...)
blacklist = []

import sys
import os
import subprocess
from optparse import OptionParser

from get_sympy import path_hack
path_hack()

parser = OptionParser()
parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
        default=False)

# if you don't see a -n `default=False`;
# if you do see a -n `store_true` means to store a True value for it;
# dest is where in options to put it, options.normal will hold the bool;
# when the user enters -h or --help, print the `help` text
parser.add_option("-n", "--normal", action="store_true", dest="normal",
        help="run normal doctests; do not require explicit imports", default=False)
parser.add_option('-t', '--types', dest='types', action='store',
        default=None, choices=['gmpy', 'gmpy1', 'python'],
        help='setup ground types: gmpy | gmpy1 | python')
parser.add_option('-C', '--no-cache', dest='cache', action='store_false',
        default=True, help='disable caching mechanism')
parser.add_option("--no-subprocess", action="store_false", dest="subprocess",
                  default=True, help="Don't run the tests in a separate "
                  "subprocess.  This may prevent hash randomization from being enabled.")
parser.add_option("--git-diff", action="store_true", dest="diff",
        default=False, help="run 'git diff' to determine which files have changed and run tests on them in addition to any you specify explicitly")

parser.set_usage("test [options ...] [files ...]")
parser.epilog = """\
"options" are any of the options above. "files" are 0 or more glob strings of \
files to run doctests on. If no file arguments are given, all doctests will be \
run. This program runs both doctests in the source and doctests in the Sphinx \
documentation (doc/src/ directory).\
"""

options, args = parser.parse_args()

if not options.cache:
    os.environ['SYMPY_USE_CACHE'] = 'no'
if options.types:
    os.environ['SYMPY_GROUND_TYPES'] = options.types
if options.diff:
    try:
        p = subprocess.Popen(['git', 'diff', '--name-only'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        print >> sys.stderr, 'git not found'
        sys.exit(1)
    if p.returncode == 0: ## only on successful exit
        out, err = p.communicate()
        args = args + out.split()
    else:
        print >> sys.stderr, 'error %d encountered while running git' % p.returncode
        sys.exit(1)

import sympy

ok = sympy.doctest(*args, verbose=options.verbose, blacklist=blacklist,
    normal=options.normal, subprocess=options.subprocess)

if ok:
    sys.exit(0)
else:
    sys.exit(1)
