%ignore /[ \t\n\r]+/

%ignore "\\," | "\\thinspace"
%ignore "\\:" | "\\medspace"
%ignore "\\;" | "\\thickspace"
%ignore "\\quad"
%ignore "\\qquad"
%ignore "\\!" | "\\negthinspace"
%ignore "\\negmedspace"
%ignore "\\negthickspace"

///////////////////// tokens ///////////////////////

ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"

L_PAREN: "("
R_PAREN: ")"
L_BRACE: "{"
R_BRACE: "}"
L_BRACE_LITERAL: "\\{"
R_BRACE_LITERAL: "\\}"
L_BRACKET: "["
R_BRACKET: "]"

%ignore "\\left"
%ignore "\\right"

L_BAR.2: "(|"
R_BAR.2: "|)"

FUNC_LIM:  "\\lim"
LIM_APPROACH_SYM: "\\to" | "\\rightarrow" | "\\Rightarrow" | "\\longrightarrow" | "\\Longrightarrow"
FUNC_INT:  "\\int"
FUNC_SUM:  "\\sum"
FUNC_PROD: "\\prod"

FUNC_EXP:  "\\exp"
FUNC_LOG:  "\\log"
FUNC_LN:   "\\ln"
FUNC_SIN:  "\\sin"
FUNC_COS:  "\\cos"
FUNC_TAN:  "\\tan"
FUNC_CSC:  "\\csc"
FUNC_SEC:  "\\sec"
FUNC_COT:  "\\cot"

FUNC_ARCSIN: "\\arcsin"
FUNC_ARCCOS: "\\arccos"
FUNC_ARCTAN: "\\arctan"
FUNC_ARCCSC: "\\arccsc"
FUNC_ARCSEC: "\\arcsec"
FUNC_ARCCOT: "\\arccot"

FUNC_SINH: "\\sinh"
FUNC_COSH: "\\cosh"
FUNC_TANH: "\\tanh"
FUNC_ARSINH: "\\arsinh"
FUNC_ARCOSH: "\\arcosh"
FUNC_ARTANH: "\\artanh"

FUNC_SQRT: "\\sqrt"

CMD_TIMES: "\\times"
CMD_CDOT:  "\\cdot"
CMD_DIV:   "\\div"
CMD_FRAC:  "\\frac"
CMD_BINOM: "\\binom"
CMD_DBINOM: "\\dbinom"
CMD_TBINOM: "\\tbinom"

CMD_MATHIT: /\\mathit\{[A-Za-z ]+\}/

UNDERSCORE: "_"
CARET: "^"
COLON: ":"
BANG: "!"

EQUAL: "="
LT: "<"
LTE: "\\leq"
GT: ">"
GTE: "\\geq"

DIFFERENTIAL: /d[ \t\r\n]*?([a-zA-Z]|\\[a-zA-Z]+)/
SYMBOL.0: /([A-Za-z]|\\[a-zA-Z]+)/
SUBSCRIPT_SYMBOL: /([A-Za-z]|\\[a-zA-Z]+)_(([A-Za-z0-9]|\\[a-zA-Z]+)|\{([A-Za-z0-9]|\\[a-zA-Z]+)\})/
INTEGER: /\d+/
FLOAT: /\d+\.\d*|\.\d+/



//////////////////// grammar //////////////////////

?start: relation

relation: relation (EQUAL | LT | LTE | GT | GTE) relation
        | expr

?expr: binary_op_1

?binary_op_1: binary_op_2 ((ADD | SUB) binary_op_2)*

?binary_op_2: binary_op_3 ((MUL | CMD_TIMES | CMD_CDOT | DIV | CMD_DIV | COLON) binary_op_3)*

?binary_op_3: unary_op sup_expression
            | unary_op

?unary_op: (ADD | SUB) implicit_mul
         | implicit_mul BANG+ -> factorial
         | implicit_mul

?implicit_mul: part+

?part: atom
     | function
     | group
     | abs_group

?group: L_PAREN expr R_PAREN
      | L_BRACKET expr R_BRACKET
      | L_BRACE expr R_BRACE
      | L_BRACE_LITERAL expr R_BRACE_LITERAL

?abs_group: L_BAR expr R_BAR

?sub_expression: UNDERSCORE (atom | L_BRACE expr R_BRACE)
?sub_equation: UNDERSCORE L_BRACE expr EQUAL expr R_BRACE
?sub_limit: UNDERSCORE L_BRACE symbol LIM_APPROACH_SYM expr R_BRACE
          | UNDERSCORE L_BRACE symbol LIM_APPROACH_SYM expr CARET L_BRACE (ADD | SUB) R_BRACE R_BRACE
?sup_expression: CARET (atom | L_BRACE expr R_BRACE)

?symbol: SYMBOL
       | SUBSCRIPT_SYMBOL

?atom: symbol
     | INTEGER
     | FLOAT
     | DIFFERENTIAL
     | CMD_MATHIT

?func_normal: FUNC_EXP
            | FUNC_LOG
            | FUNC_LN
            | FUNC_SIN
            | FUNC_COS
            | FUNC_TAN
            | FUNC_CSC
            | FUNC_SEC
            | FUNC_COT
            | FUNC_ARCSIN
            | FUNC_ARCCOS
            | FUNC_ARCTAN
            | FUNC_ARCCSC
            | FUNC_ARCSEC
            | FUNC_ARCCOT
            | FUNC_SINH
            | FUNC_COSH
            | FUNC_TANH
            | FUNC_ARSINH
            | FUNC_ARCOSH
            | FUNC_ARTANH

?function: func_normal sup_expression? sub_expression? L_PAREN expr R_PAREN -> normal_function
         | symbol L_PAREN function_args R_PAREN -> named_function
         | fraction
         | sqrt
         | binomial
         | summation
         | product
         | limit

?function_args: expr ("," expr)*

?fraction: CMD_FRAC L_BRACE expr R_BRACE L_BRACE expr R_BRACE

?sqrt: FUNC_SQRT (L_BRACKET expr R_BRACKET)? L_BRACE expr R_BRACE

?binomial: (CMD_BINOM | CMD_DBINOM | CMD_TBINOM) L_BRACE expr R_BRACE L_BRACE expr R_BRACE

?summation: FUNC_SUM sub_equation sup_expression expr
          | FUNC_SUM sup_expression sub_equation expr

?product: FUNC_PROD sub_equation sup_expression expr
        | FUNC_PROD sup_expression sub_equation expr

?limit: FUNC_LIM sub_limit expr